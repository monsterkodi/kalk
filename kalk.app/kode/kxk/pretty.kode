###
00000000   00000000   00000000  000000000  000000000  000   000
000   000  000   000  000          000        000      000 000 
00000000   0000000    0000000      000        000       00000  
000        000   000  000          000        000        000   
000        000   000  00000000     000        000        000   
###

use ◆ klor slash

function pretty

    #  0000000    0000000   00000000  
    # 000   000  000        000       
    # 000000000  000  0000  0000000   
    # 000   000  000   000  000       
    # 000   000   0000000   00000000  
    
    @age: dateOrString opt={} ->
        
        levels = opt.levels ? 1 #   ▸ 3 months
                            # 2     ▸ 3 months 5 days
                            # 3     ▸ 3 months 5 days 7 hours
    
        if dateOrString is str
            date = new Date Date.parse dateOrString
        else
            date = new Date dateOrString
            
        diff = Date.now() - date.valueOf()
        
        sec = parseInt diff/1000
        
        time =
            year:   Math.floor sec / (60*60*24*30*12)
            month:  Math.floor sec / (60*60*24*30) % 12
            day:    Math.floor sec / (60*60*24) % 30
            hour:   Math.floor sec / (60*60) % 24
            minute: Math.floor sec / 60 % 60
            second: Math.floor sec % 60
            
        s = []
        for key,val of time
            if val == 0 ➜ if s.length ➜ return s[0]
            else s.push "#{val} #{@deplural(key+'s' val)}"
                         
            if s.length == levels ➜ return s.join ' '
                  
        if empty s
            '0 seconds'
        else
            s.join ' '
        
    # 0000000    000   000  000000000  00000000   0000000  
    # 000   000   000 000      000     000       000       
    # 0000000      00000       000     0000000   0000000   
    # 000   000     000        000     000            000  
    # 0000000       000        000     00000000  0000000   
    
    @bytes: bytes ->
        
        number = Math.abs parseInt bytes
        
        ⮐ '0 bytes' if not number is num or number == 0
        
        UNITS = [ 'bytes' 'kB' 'MB' 'GB' 'TB' ]

        exponent = Math.min Math.floor(Math.log10(number)/3), UNITS.length - 1
        number  /= Math.pow 1000 exponent
        
        numStr = @number number, decimals:0
        numStr + ' ' + @deplural UNITS[exponent], numStr
        
    # 000   000  000   000  00     00  0000000    00000000  00000000   
    # 0000  000  000   000  000   000  000   000  000       000   000  
    # 000 0 000  000   000  000000000  0000000    0000000   0000000    
    # 000  0000  000   000  000 0 000  000   000  000       000   000  
    # 000   000   0000000   000   000  0000000    00000000  000   000  
    
    @number: number opt={} ->
        
                                # 0        0.123 ▸ 0
        decimals = opt.decimals ? 1 #      1.123 ▸ 1.1
                                # 2        2.223 ▸ 2.22

        prune    = opt.prune    ? true
                                #          7.000 ▸ 7
                                #          7.100 ▸ 7.1
                                # false      
                                #          7.000 ▸ 7.000
                                #          7.100 ▸ 7.100
        
        ps = number.toFixed decimals
        
        if prune and decimals
        
            while ps[-1] == '0' ➜ ps = ps[0...-1]
            if    ps[-1] == '.' ➜ ps = ps[0...-1]
        ps
        
    @deplural: plural num ->
        
        if parseInt(num) == 1 and plural[-1] == 's'
            plural[0...-1]
        else
            plural
            
    @shortCount: num ->
    
        v = parseInt num
        if
            v > 999999 ➜ "#{Math.floor v/1000000}M"
            v > 999    ➜ "#{Math.floor v/1000}k"
                       ➜ "#{v}"

    #  0000000  000      000         0000000   000   000   0000000  000     
    # 000       000      000        000   000  0000  000  000       000    
    # 000       000      000        000000000  000 0 000  0000000   000    
    # 000       000      000        000   000  000  0000       000  000    
    #  0000000  0000000  000        000   000  000   000  0000000   000    
    
    @path:     p c=klor.y5 -> p.split('/').map((n) -> c(n)).join klor.dim(c('/'))
    @ext:      e c=klor.y3 -> e.length ? klor.dim(c('.')) + c(e) : ''
    @file:     f c=klor.y5, e=klor.y3 -> "#{klor.bold(c(slash.name(f)))}#{pretty.ext(slash.ext(f),e)}"
    @filePath: p c=klor.y5, d=klor.y3, e ->

        e ?= d
        if valid slash.dir p
            "#{pretty.path(slash.tilde(slash.dir(p)),d)}#{pretty.path('/',d)}#{pretty.file(slash.file(p),c,e)}"
        else
            "#{pretty.file(slash.file(p),c)}"

    # 00000000    0000000   000   000   0000000   00000000   0000000  
    # 000   000  000   000  0000  000  000        000       000       
    # 0000000    000000000  000 0 000  000  0000  0000000   0000000   
    # 000   000  000   000  000  0000  000   000  000            000  
    # 000   000  000   000  000   000   0000000   00000000  0000000   
    
    @ranges: rgs ->

        result = ''
        plain  = ''
        
        for rng in rgs
            
            while plain.length < rng.start
                plain += ' '
                result += ' '

            cfunc = switch rng.clss

                    'text'                  ➜ ⮐ (s) -> klor.white s
                    'text require string'   ➜ ⮐ (s) -> klor.gray klor.bold s
                    'comment'               ➜ ⮐ (s) -> klor.w1 s
                    'punct comment'         ➜ ⮐ (s) -> klor.w1 klor.dim s
                    'punct'
                    'punct minor'
                    'punct require'
                    'keyword require'       ➜ ⮐ (s) -> klor.gray klor.dim s
                    'function'
                    'function call'
                    'string single'
                    'string double'
                    'dir text'
                    'property'
                    'function argument'     ➜ ⮐ (s) -> klor.g3 klor.bold s
                    'punct string interpolation start' 
                    'punct string interpolation end' ➜ (s) -> klor.g1 klor.bold s
                    'punct string single'
                    'punct string double'
                    'punct string double triple' 
                    'punct dir'
                    'punct function call'   ➜ ⮐ (s) -> klor.green klor.dim s
                    'method class'          ➜ ⮐ (s) -> klor.y4 klor.bold s
                    'obj'
                    'class'
                    'git file'
                    'dictionary key'
                    'module'                ➜ ⮐ (s) -> klor.y4 s
                    'method'                ➜ ⮐ (s) -> klor.y5 klor.bold s
                    'punct method'          ➜ ⮐ (s) -> klor.y2 klor.bold s
                    'punct git'
                    'git ext'
                    'punct method class'
                    'punct dictionary'
                    'punct function'        ➜ ⮐ (s) -> klor.yellow klor.dim s
                    'number' 'keyword'
                    'punct compare ligature'
                    'url domain'            ➜ ⮐ (s) -> klor.blue klor.bold s  
                    'require'
                    'punct property'        ➜ ⮐ (s) -> klor.green klor.dim s  
                    'punct semver' 
                    'url protocol'
                    'punct regexp start'
                    'punct regexp end'
                    'punct regexp'
                    'punct url'             ➜ ⮐ (s) -> klor.magenta s 
                    'punct escape regexp'   ➜ ⮐ (s) -> klor.m1 s 
                    'semver' 
                    'dir url tld'
                    'text regexp'
                    'punct url tld'         ➜ ⮐ (s) -> klor.magenta klor.bold s  
                    'punct function tail ligature' 
                    'punct function async' 
                    'punct keyword' 
                    'punct await'
                    'punct keyword return'  ➜ ⮐ (s) -> klor.b5 klor.bold s
                    'nil'                   ➜ ⮐ (s) -> klor.r2 s
                                            ➜ ⮐ (s) -> klor.white s

            plain  += rng.match
            result += cfunc rng.match

        result
                       
export pretty
