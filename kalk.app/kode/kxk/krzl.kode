###
    000   000  00000000   0000000  000    
    000  000   000   000     000   000    
    0000000    0000000      000    000    
    000  000   000   000   000     000    
    000   000  000   000  0000000  0000000
    
    filters values by an abbreviation.
    the abbreviation matches if each character
    is contained in the (extracted) string.
###

function Krzl

    @: (opt) ->
        
        if opt is arr
            opt = values:opt
        else 
            opt ?= {}
            
        @values  = opt.values             # the values to sort
        @weight  = opt.weight             # customize result order, can be undefined
        @extract = opt.extract ? (i) -> i # only works on strings if @extract isn't provided
        @sortByLength = opt.sortByLength ? true # by default, results are sorted by length
    
    # 00     00   0000000   000000000   0000000  000   000  
    # 000   000  000   000     000     000       000   000  
    # 000000000  000000000     000     000       000000000  
    # 000 0 000  000   000     000     000       000   000  
    # 000   000  000   000     000      0000000  000   000  
    
    match: (abbrv, exstr) ->
        
        if abbrv is str and exstr is str
            
            ai = 0
            ei = 0
            
            indices = []
            
            while ai < abbrv.length and ei < exstr.length
                ac = abbrv[ai]
                ec = exstr[ei]
                
                if ac == ec
                    indices.push ei
                    ai++
                    ei++
                    continue
                ei++
                
            if ai == abbrv.length
                return 
                    extract:exstr 
                    indices:indices
        null
        
    #  0000000   0000000   00000000   000000000  
    # 000       000   000  000   000     000     
    # 0000000   000   000  0000000       000     
    #      000  000   000  000   000     000     
    # 0000000    0000000   000   000     000     
    
    sort: (pairs) -> pairs.sort (a,b) => @calcWeight(a) - @calcWeight(b)

    calcWeight: (pair) ->
        
        [value, info] = pair

        e = 0.00001
        w = e
        if @weight is func
            w = @weight value, info
            w = e if not w is num or w < e
            
        lengthOffset = @sortByLength ? 1-1/info.extract.length : 0
        
        (1/w) * (info.indices[0] + lengthOffset)
        
    # 00000000  000  000      000000000  00000000  00000000   
    # 000       000  000         000     000       000   000  
    # 000000    000  000         000     0000000   0000000    
    # 000       000  000         000     000       000   000  
    # 000       000  0000000     000     00000000  000   000  
    
    filter: (abbrv) -> # subset of values that match abbreviation
    
        if empty abbrv        ➜ warn 'krzl.filter without abbreviation?'      ; ⮐ []
        if empty @values      ➜ warn 'krzl.filter without @values?'           ; ⮐ []
        if not abbrv is str   ➜ warn 'krzl.filter abbreviation not a string?' ; ⮐ []
        if not @values is arr ➜ warn 'krzl.filter @values not an array?'      ; ⮐ []
        
        pairs = []
        for value in @values
            if mi = @match abbrv.toLowerCase(), @extract(value).toLowerCase()
                pairs.push [value, mi]
        
        @sort pairs
        pairs.map (p) -> p[0]
    
export Krzl

