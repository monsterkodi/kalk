###
     0000000  000       0000000    0000000  000   000    
    000       000      000   000  000       000   000    
    0000000   000      000000000  0000000   000000000    
         000  000      000   000       000  000   000    
    0000000   0000000  000   000  0000000   000   000    
###

use ./os

sep = '/' 
    
class Slash

    @sep: '/' 
    
    @logErrors: true

    # 00000000    0000000   000000000  000   000  
    # 000   000  000   000     000     000   000  
    # 00000000   000000000     000     000000000  
    # 000        000   000     000     000   000  
    # 000        000   000     000     000   000  
    
    @path: (p) ->
        
        if arguments.length > 1
            arr = Array.from arguments
            arr = arr.filter (c) -> valid c
            p = arr.join '/'
            
        return '' if empty p
        
        if p.startsWith '~/'
            p = Slash.untilde p
            tilde = true
        p = Slash.unenv p
        p = Slash.normalize p
        
        if not p
            log 'no pee?' p
            return p
            
        if p.endsWith(':.') and p.length == 3
            p = p[..1]
            
        if p.endsWith(':') and p.length == 2
            p = p + '/'
            
        p = Slash.tilde p if tilde
            
        p
        
    # 000   000   0000000   00000000   00     00   0000000   000      000  0000000  00000000  
    # 0000  000  000   000  000   000  000   000  000   000  000      000     000   000       
    # 000 0 000  000   000  0000000    000000000  000000000  000      000    000    0000000   
    # 000  0000  000   000  000   000  000 0 000  000   000  000      000   000     000       
    # 000   000   0000000   000   000  000   000  000   000  0000000  000  0000000  00000000  
    
    @normalize: (path) ->
        
        return '' if not path is str
        return '' if empty path
        
        path = path.replaceAll '\\' '/'
        
        comp = path.split '/'
        
        prun = []
        for i,c of comp
            continue if valid prun and c == '.'
            continue if empty c and 0 < i < comp.length-1
            if c == '..' 
                if valid prun 
                    if prun[-1] == '.'
                        prun.pop()
                    else if prun[-1] != '..'
                        prun.pop()
                        continue
            prun.push c
        
        prun.join '/'
        
    # 000   000  000   000   0000000  000       0000000    0000000  000   000  
    # 000   000  0000  000  000       000      000   000  000       000   000  
    # 000   000  000 0 000  0000000   000      000000000  0000000   000000000  
    # 000   000  000  0000       000  000      000   000       000  000   000  
    #  0000000   000   000  0000000   0000000  000   000  0000000   000   000  
    
    @unslash: (p) ->
        
        p = Slash.path p
        
        if Slash.win()
            
            if p.length >= 3 and p[0] == '/' == p[2] 
                p = p[1] + ':' + p.slice 2
                
            reg = new RegExp "/" 'g'
            
            p = p.replace reg, '\\'
            
            if p[1] == ':'
                p =  p[0].toUpperCase() + p[1..]
        p
        
    # 00000000   00000000  000       0000000   000000000  000  000   000  00000000  
    # 000   000  000       000      000   000     000     000  000   000  000       
    # 0000000    0000000   000      000000000     000     000   000 000   0000000   
    # 000   000  000       000      000   000     000     000     000     000       
    # 000   000  00000000  0000000  000   000     000     000      0      00000000  
    
    @relative: (rel, to) ->
        
        to = Slash.path to
        return to if empty rel
        
        rel = Slash.path rel
        return '.' if to == rel
        
        if rel.startsWith to
            r = rel[to.length..]
            r = r[1..] if r[0] == Slash.sep
            return r
        
        rc = Slash.split rel
        tc = Slash.split to
        
        dd = ''
        while rc[0] == tc[0]
            rc.shift()
            tc.shift()
            
        return dd + rc.join '/' if valid dd
        
        while valid tc
            tc.shift()
            dd += '../'
            
        return dd + rc.join '/' if valid dd
        
        rel
            
    #  0000000  00000000   000      000  000000000  
    # 000       000   000  000      000     000     
    # 0000000   00000000   000      000     000     
    #      000  000        000      000     000     
    # 0000000   000        0000000  000     000     
    
    @split: (p) -> Slash.path(p).split('/').filter (e) -> e.length
    
    @contains: (p, d) -> d in Slash.split p
    
    @splitDrive: (p) ->
        
        p = Slash.path p
        parsed = Slash.parse p
        if parsed.dir.length > 1
            if parsed.dir[1] == ':'
                return [p[2..], parsed.dir[0]]
        else if parsed.file.length == 2
            if parsed.file[1] == ':'
                return ['/', parsed.file[0]]
                
        [Slash.path(p), '']
        
    @removeDrive: (p) ->
        
        return Slash.splitDrive(p)[0]
  
    @isRoot: (p) -> Slash.removeDrive(p) == '/'
        
    @splitFileLine: (p) ->  # file.txt:1:0 --> ['file.txt', 1, 0]
        
        [f,d] = Slash.splitDrive p
        split = String(f).split ':'
        line = parseInt split[1] if split.length > 1
        clmn = parseInt split[2] if split.length > 2
        l = c = 0
        l = line if Number.isInteger line
        c = clmn if Number.isInteger clmn
        d = d + ':' if d != ''
        [ d + split[0], Math.max(l,1),  Math.max(c,0) ]
        
    @hasFilePos:     p -> ps = Slash.splitFilePos(p); ps[1][0] != 0 or ps[1][1] != 0
    @sameFilePos:  a b -> as = Slash.splitFilePos(a); bs = Slash.splitFilePos(b); as[0] == bs[0] and as[1][1] == bs[1][1] and as[1][0] == bs[1][0]
    @sameFileLine: a b -> as = Slash.splitFilePos(a); bs = Slash.splitFilePos(b); as[0] == bs[0] and as[1][1] == bs[1][1]
    @removeFilePos:  p -> Slash.splitFilePos(p)[0]
    
    @splitFilePos:   p -> # file.txt:1:3 --> ['file.txt', [3, 0]]
    
        [f,l,c] = Slash.splitFileLine p
        [f, [c, l-1]]
        
    @removeLinePos: (p) -> Slash.splitFileLine(p)[0]
    @removeColumn:  (p) -> 
        [f,l] = Slash.splitFileLine p
        if l>1 then f + ':' + l
        else f
        
    # 00000000  000   000  000000000  
    # 000        000 000      000     
    # 0000000     00000       000     
    # 000        000 000      000     
    # 00000000  000   000     000     
    
    @ext:       (p) -> Slash.parse(p).ext
    @removeExt: (p) -> d = Slash.parse(p); Slash.path d.dir, d.name
    @splitExt:  (p) -> [Slash.removeExt(p), Slash.ext(p)]
    @swapExt:   (p, ext) -> Slash.removeExt(p) + (ext.startsWith('.') and ext or ".#{ext}")
        
    #       000   0000000   000  000   000  
    #       000  000   000  000  0000  000  
    #       000  000   000  000  000 0 000  
    # 000   000  000   000  000  000  0000  
    #  0000000    0000000   000  000   000  
    
    @joinFilePos: (file, pos) -> # ['file.txt', [3, 0]] --> file.txt:1:3
        
        file = Slash.removeLinePos file
        if not pos? or not pos[0]? or pos[0] == pos[1] == 0
            file
        else if pos[0]
            file + ":#{pos[1]+1}:#{pos[0]}"
        else
            file + ":#{pos[1]+1}"
                
    @joinFileLine: (file, line, col) -> # 'file.txt', 1, 2 --> file.txt:1:2
        
        file = Slash.removeLinePos file
        return file if not line
        return "#{file}:#{line}" if not col
        "#{file}:#{line}:#{col}"
            
    # 00000000    0000000   000000000  000   000  000      000   0000000  000000000  
    # 000   000  000   000     000     000   000  000      000  000          000     
    # 00000000   000000000     000     000000000  000      000  0000000      000     
    # 000        000   000     000     000   000  000      000       000     000     
    # 000        000   000     000     000   000  0000000  000  0000000      000     
    
    @pathlist: (p) -> # '/root/dir/file.txt' --> ['/', '/root', '/root/dir', '/root/dir/file.txt']
    
        if not p?.length
            Slash.error "Slash.pathlist -- no path?" 
            return []
            
        p = Slash.path p
            
        if p.length > 1 and p[p.length-1] == '/' and p[p.length-2] != ':'
            p = p[...p.length-1] 
        else if p == '/'
            return ['/']
            
        list = [p]
        
        comp = p.split Slash.sep
        while comp.length > 1
            comp.pop()
            if comp.length == 1 and comp[0] == ''
                list.unshift Slash.sep
            else
                list.unshift comp.join Slash.sep
            
        list
        
    # 0000000    000  00000000           00000000  000  000      00000000        000   000   0000000   00     00  00000000
    # 000   000  000  000   000          000       000  000      000             0000  000  000   000  000   000  000     
    # 000   000  000  0000000            000000    000  000      0000000         000 0 000  000000000  000000000  0000000 
    # 000   000  000  000   000          000       000  000      000             000  0000  000   000  000 0 000  000     
    # 0000000    000  000   000          000       000  0000000  00000000        000   000  000   000  000   000  00000000
    
    @dir:        (p) -> Slash.parse(p).dir
    @file:       (p) -> Slash.parse(p).file
    @name:       (p) -> Slash.parse(p).name
    
    @isAbsolute: (p) -> p?[0] == Slash.sep
    @isRelative: (p) -> not Slash.isAbsolute p
    
    # 00000000    0000000   00000000    0000000  00000000  
    # 000   000  000   000  000   000  000       000       
    # 00000000   000000000  0000000    0000000   0000000   
    # 000        000   000  000   000       000  000       
    # 000        000   000  000   000  0000000   00000000  
    
    @parse: (p) ->
                
        p = Slash.path p
        p = p[...-1] if p.endsWith Slash.sep
        
        if p == '~'
            components = Slash.untilde(p).split Slash.sep
        else
            components = p.split Slash.sep
        
        file = components[-1]

        dots = file.split '.'
        ext  = (dots.length > 1 and dots[-1].length) ? dots.pop() : ''
        name = dots.join '.'
        
        dir = components[...-1].join '/'
        dir = Slash.sep if Slash.isAbsolute(p) and empty dir

        path: p
        dir:  dir
        file: file
        name: name
        ext:  ext
    
    # 00     00  000   0000000   0000000    
    # 000   000  000  000       000         
    # 000000000  000  0000000   000         
    # 000 0 000  000       000  000         
    # 000   000  000  0000000    0000000    
    
    @home:   -> globalThis.homeDir ? process.env.HOME  
    @user:   -> globalThis.useName ? process.env.USER  
    @tmpdir: -> globalThis.tmpDir  ? process.env.TMPDIR
    
    @tmpfile: (ext) ->

        Slash.path Slash.tmpdir(), "#{Date.now()}#{Math.random()}" + (ext and ".#{ext}" or '')
    
    @tilde:     (p) -> p?.replace Slash.home(), '~'
    @untilde:   (p) -> p?.replace /^\~/, Slash.home()
    @unenv:     (p) -> 
        
        i = p.indexOf '$', 0
        while i >= 0
            for k,v of process.env
                if k == p.slice i+1, i+1+k.length
                    p = p.slice(0, i) + v + p.slice(i+k.length+1)
                    break
            i = p.indexOf '$', i+1
            
        p
                
    @fileUrl: (p) -> "file:///#{Slash.encode p}"

    @samePath: (a, b) -> Slash.path(a) == Slash.path(b)

    @escape: (p) -> p.replace /([\`\"])/g, '\\$1'
    
    @encode: (p) ->
        p = encodeURI p
        p = p.replace /\#/g, "%23"
        p = p.replace /\&/g, "%26"
        p = p.replace /\'/g, "%27"
        
    @sanitize: (p) ->
        
        while p[0] in '\n\r\t' ➜ p = p[1..]
        while p[-1] in '\n\r\t' ➜ p = p[...-1]
        p

    # 000000000  00000000  000   000  000000000
    #    000     000        000 000      000   
    #    000     0000000     00000       000   
    #    000     000        000 000      000   
    #    000     00000000  000   000     000   
    
    @textext: null
    
    @textbase: 
        profile:1
        license:1
        '.gitignore':1
        '.npmignore':1
                                            
    # 00000000   00000000   0000000         000   000  000  000   000        00000000  00000000   00000000   
    # 000   000  000       000              000 0 000  000  0000  000        000       000   000  000   000  
    # 0000000    0000000   000  0000        000000000  000  000 0 000        0000000   0000000    0000000    
    # 000   000  000       000   000        000   000  000  000  0000        000       000   000  000   000  
    # 000   000  00000000   0000000         00     00  000  000   000        00000000  000   000  000   000  
    
    
    @reg: new RegExp "\\\\" 'g'

    @win: -> Slash.sep == '\\'
        
    @error: (msg) -> 
        if @logErrors then error msg 
        ''

export Slash
