###
    000   000  000   000  00000000   0000000    
    000  000   0000  000  000   000  000   000  
    0000000    000 0 000  0000000    000   000  
    000  000   000  0000  000   000  000   000  
    000   000  000   000  000   000  0000000    

    transpiles kode, noon, styl and pug files
###

use ../kode ‚óÜ kode
use ../kxk  ‚óÜ nfs fs slash pug styl noon
use         ‚óÜ version

# 00000000   000   000  000      00000000   0000000  
# 000   000  000   000  000      000       000       
# 0000000    000   000  000      0000000   0000000   
# 000   000  000   000  000      000            000  
# 000   000   0000000   0000000  00000000  0000000   

rules =
    
    kode: 
        tgtExt:  'js'
        srcDir:  'kode'
        tgtDir:  'js'
        compile: srcText srcFile -> k0de = new kode header:false; k0de.compile srcText, srcFile
    styl:
        tgtExt:  'css'
        srcDir:  'pyg'
        tgtDir:  'js/css'
        compile: srcText srcFile -> styl srcText
    pug:
        tgtExt:  'html'
        srcDir:  'pyg'
        tgtDir:  'js'
        compile: srcText srcFile -> pug srcText
    noon:
        tgtExt:  'json'
        srcDir:  'kode'
        tgtDir:  'js'
        compile: srcText srcFile -> JSON.stringify noon.parse(srcText), null, '  '
        
    ignore: [
        'kolor/lang.noon'
        'ko/help.noon'
        ]
        
# 000   000  000000000  000  000        
# 000   000     000     000  000        
# 000   000     000     000  000        
# 000   000     000     000  000        
#  0000000      000     000  0000000    
            
srcForFile = file ->
    
    srcFile = file
    if slash.isRelative srcFile
        srcFile = slash.path process.cwd(), srcFile
    srcFile
    
tgtForSrc = srcFile rule ->
    
    slash.swapExt srcFile.replace(bundlePath(rule.srcDir), bundlePath(rule.tgtDir)), rule.tgtExt
    
bundlePath = p='' -> slash.path bundleDir(), p
    
bundleDir = ->
    
    d = process.cwd()
    while valid d
        ‚Æê d if slash.ext(d) == 'app'
        d = slash.dir d
    slash.path ‚óÜdir '../..'
  
bump = ‚óã->
    
    ‚óã nfs.write bundlePath('kode/konrad/version.kode'), "export #{version+1}\n"
    ‚óã nfs.write bundlePath('js/konrad/version.js'), "export default #{version+1};"
    
#  0000000    0000000   000000000  000   000  00000000  00000000   
# 000        000   000     000     000   000  000       000   000  
# 000  0000  000000000     000     000000000  0000000   0000000    
# 000   000  000   000     000     000   000  000       000   000  
#  0000000   000   000     000     000   000  00000000  000   000  

gatherFiles = ‚óã->
    
    list  =‚óã fs.list bundlePath 'kode'
    list  = list.concat ‚óã fs.list bundlePath 'pyg'
    list  = list.filter (item) -> item.type == 'file'
    
    files = list.map (item) -> item.path
    files = files.filter (file) -> 
        for ignore in rules.ignore
            ‚Æê false if file.endsWith ignore
        true
    
# 000   000  000   000  00000000   0000000    
# 000  000   0000  000  000   000  000   000  
# 0000000    000 0 000  0000000    000   000  
# 000  000   000  0000  000   000  000   000  
# 000   000  000   000  000   000  0000000    

knrd = files=[] opt={} ‚óã->
       
    if files is str
        if slash.ext(files) in ['kode']
            files = [files]
        else
            files = []
            
    if files is arr
        if slash.ext(files[0]) not in ['kode']
            files = []
        
    opt.verbose        ?= opt.debug
    log 'opt'    opt   if opt.debug
    log 'files'  files if opt.debug
    
    # ‚óè üî®
            
    files =‚óã gatherFiles() if empty files
    
    icon = opt.dryrun ? w4('ÔÅö ') : 'üî®'
        
    log icon, w5(slash.name bundleDir())+w2('.')+w3(slash.ext bundleDir()), b5(files.length) if not opt.quiet
    
    transpiled = 0
        
    for file in files
        
        skip = false
        for ignore in rules.ignore
            if file.endsWith ignore
                log w2('‚úò  '), w3 slash.tilde file if opt.verbose
                skip = true
                break
                
        if skip ‚ûú continue
        
        if rule = rules[slash.ext file]
            
            srcFile  = srcForFile file
            tgtFile  = tgtForSrc  srcFile, rule
                     
            srcText  =‚óã fs.read srcFile
            tgtText  =‚óã fs.read tgtFile
            compText = rule.compile srcText, srcFile
            
            log 'tgtText'  tgtFile, tgtText if opt.debug and opt.verbose
            log 'compText' compText         if opt.debug and opt.verbose
                
            if empty compText
                log y5('‚úò '), r5(slash.tilde srcFile), r4('transpiles to empty!')
            else
                log g2('üîß'), m3 slash.tilde srcFile if opt.verbose
                if tgtText != compText
                    transpiled++
                    ‚óã fs.write tgtFile, compText if not opt.dryrun
                    log b5('‚úî '), g5 slash.tilde tgtFile
                    
    ‚óã bump() if transpiled and not opt.dryrun
    
    transpiled
        
knrd.bundlePath = bundlePath
    
export knrd
