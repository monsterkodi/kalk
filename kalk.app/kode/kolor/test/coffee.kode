
###
 0000000   0000000   00000000  00000000  00000000  00000000  
000       000   000  000       000       000       000       
000       000   000  000000    000000    0000000   0000000   
000       000   000  000       000       000       000       
 0000000   0000000   000       000       00000000  00000000  
###

use ./util ▪ inc ranges dissect lang

lang 'coffee'

▸ coffee

    ▸ misc

        rgs = ranges "util = require 'util'"
        inc rgs, 7 'require'    ▸ 'require'
        
        rgs = ranges "class Macro extends Command"
        inc rgs, 0  'class'     ▸ 'keyword'
        inc rgs, 6  'Macro'     ▸ 'class'
        inc rgs, 12 'extends'   ▸ 'keyword'
        inc rgs, 20 'Command'   ▸ 'class'
        
        rgs = ranges "exist?.prop"
        inc rgs, 7 'prop'       ▸ 'property'
                        
        rgs = ranges "a and b"
        inc rgs, 0 "a"          ▸ 'text'
        inc rgs, 2 "and"        ▸ 'keyword'
    
        rgs = ranges "if a then b"
        inc rgs, 0 "if"         ▸ 'keyword'
        inc rgs, 3 "a"          ▸ 'text'
        inc rgs, 5 "then"       ▸ 'keyword'
        inc rgs, 10 "b"         ▸ 'text'
    
        rgs = ranges "switch a"
        inc rgs, 0 "switch"     ▸ 'keyword'
        
        rgs = ranges " a: b"
        inc rgs, 1 "a"          ▸ 'dictionary key'
        inc rgs, 2 ":"          ▸ 'punct dictionary'
        
        rgs = ranges "obj.value = obj.another.value"
        inc rgs, 0  "obj"       ▸ 'obj'
        inc rgs, 4  "value"     ▸ 'property'
        inc rgs, 12 "obj"       ▸ 'obj'
        inc rgs, 16 "another"   ▸ 'property'
        inc rgs, 24 "value"     ▸ 'property'
            
        rgs = ranges "if someObject.someProp"
        inc rgs, 0 "if"         ▸ 'keyword'
        inc rgs, 3 "someObject" ▸ 'obj'
        inc rgs, 13 "."         ▸ 'punct property'
        inc rgs, 14 "someProp"  ▸ 'property'
        
        rgs = ranges "1 'a'"
        inc rgs, 0 "1"          ▸ 'number'
    
        rgs = ranges "a[0].prop"
        inc rgs, 3 ']'          ▸ 'punct'
        
        rgs = ranges "[ f ]"
        inc rgs, 2 'f'          ▸ 'text'
    
        rgs = ranges "[ f , f ]"
        inc rgs, 2 'f'          ▸ 'text'
        
        rgs = ranges "a[...2]"
        inc rgs, 2 '.'          ▸ 'punct range'
        inc rgs, 3 '.'          ▸ 'punct range'
        inc rgs, 4 '.'          ▸ 'punct range'
    
        rgs = ranges "a[ -1 .. ]"
        inc rgs, 6 '.'          ▸ 'punct range'
        inc rgs, 7 '.'          ▸ 'punct range'
    
        rgs = ranges "a[1..n]"
        inc rgs, 3 '.'          ▸ 'punct range'
        inc rgs, 4 '.'          ▸ 'punct range'
    
        rgs = ranges "a[ .... ]"
        inc rgs, 3 '.'          ▸ 'punct'
        inc rgs, 4 '.'          ▸ 'punct'
        inc rgs, 5 '.'          ▸ 'punct'
        inc rgs, 6 '.'          ▸ 'punct'
        
        rgs = ranges "@f [1]"
        inc rgs, 0 "@"          ▸ 'punct function call'
        inc rgs, 1 "f"          ▸ 'function call'
    
        rgs = ranges "@f = 1"
        inc rgs, 0 "@"          ▸ 'punct this'
        inc rgs, 1 "f"          ▸ 'text this'
        
        rgs = ranges "@height/2 + @height/6"
        inc rgs, 0 '@'          ▸ 'punct this'
        inc rgs, 1 'height'     ▸ 'text this'
        inc rgs, 8 "2"          ▸ 'number'
                
    # 00000000  000   000  000   000   0000000  000000000  000   0000000   000   000  
    # 000       000   000  0000  000  000          000     000  000   000  0000  000  
    # 000000    000   000  000 0 000  000          000     000  000   000  000 0 000  
    # 000       000   000  000  0000  000          000     000  000   000  000  0000  
    # 000        0000000   000   000   0000000     000     000   0000000   000   000  

    ▸ function

        rgs = ranges "obj.prop.call 1"
        inc rgs, 0 'obj'        ▸ 'obj'
        inc rgs, 4 'prop'       ▸ 'property'
        inc rgs, 9 'call'       ▸ 'function call'
        
        rgs = ranges "dolater =>"
        inc rgs, 8 '='          ▸ 'punct function bound tail'
        inc rgs, 9 '>'          ▸ 'punct function bound head'

        rgs = ranges "dolater ->"
        inc rgs, 8 '-'          ▸ 'punct function tail'
        inc rgs, 9 '>'          ▸ 'punct function head'

        rgs = ranges "async ○->"
        inc rgs, 6 '○'          ▸ 'punct function async'
        inc rgs, 7 '-'          ▸ 'punct function tail'
        inc rgs, 8 '>'          ▸ 'punct function head'
                
        rgs = ranges "@a @b 'c'"
        inc rgs, 0 '@'          ▸ 'punct function call'
        inc rgs, 1 'a'          ▸ 'function call'
        inc rgs, 3 '@'          ▸ 'punct function call'
        inc rgs, 4 'b'          ▸ 'function call'
        
        rgs = ranges "@a 3 @b '5'"
        inc rgs, 0 '@'          ▸ 'punct function call'
        inc rgs, 1 'a'          ▸ 'function call'

        rgs = ranges "fff 1"
        inc rgs, 0 "fff"        ▸ 'function call'
                
        rgs = ranges "f 'a'"
        inc rgs, 0 "f"          ▸ 'function call'
        
        rgs = ranges "ff 'b'"
        inc rgs, 0 "ff"         ▸ 'function call'

        rgs = ranges "ffff -1"
        inc rgs, 0 "ffff"       ▸ 'function call'

        rgs = ranges "f [1]"
        inc rgs, 0 "f"          ▸ 'function call'
        
        rgs = ranges "fffff {1}"
        inc rgs, 0 "fffff"      ▸ 'function call'

        rgs = ranges "i ++a"
        inc rgs, 0 'i'          ▸ 'function call'
        
        rgs = ranges "i +4"
        inc rgs, 0 'i'          ▸ 'function call'

        rgs = ranges "i -4"
        inc rgs, 0 'i'          ▸ 'function call'
        
        rgs = ranges "pos= (item, p) -> "
        inc rgs, 0 "pos"        ▸ 'function'
        
        rgs = ranges "i != false"
        inc rgs, 0 'i'              ▸ 'text'

        rgs = ranges "i += 1"
        inc rgs, 0 'i'              ▸ 'text'
        
        rgs = ranges "i -= 1"
        inc rgs, 0 'i'              ▸ 'text'

        rgs = ranges "i *= 1"
        inc rgs, 0 'i'              ▸ 'text'

        rgs = ranges "i /= 1"
        inc rgs, 0 'i'              ▸ 'text'
        
        rgs = ranges "i ? false"
        inc rgs, 0 'i'              ▸ 'text'

        rgs = ranges "i < 3"
        inc rgs, 0 'i'              ▸ 'text'

        rgs = ranges "i > 3"
        inc rgs, 0 'i'              ▸ 'text'

        rgs = ranges "i + 3"
        inc rgs, 0 'i'              ▸ 'text'

        rgs = ranges "i - 3"
        inc rgs, 0 'i'              ▸ 'text'

        rgs = ranges "i * 3"
        inc rgs, 0 'i'              ▸ 'text'

        rgs = ranges "i / 3"
        inc rgs, 0 'i'              ▸ 'text'

        rgs = ranges "i % 3"
        inc rgs, 0 'i'              ▸ 'text'

        rgs = ranges "i = 3"
        inc rgs, 0 'i'              ▸ 'text'

        rgs = ranges "i == 3"
        inc rgs, 0 'i'              ▸ 'text'

    # 000000000  00000000   000  00000000   000      00000000  
    #    000     000   000  000  000   000  000      000       
    #    000     0000000    000  00000000   000      0000000   
    #    000     000   000  000  000        000      000       
    #    000     000   000  000  000        0000000  00000000  
    
    ▸ triple regexp
        
        rgs = ranges "///a///,b"
        inc rgs, 0 "/"      ▸   'punct regexp triple'
        inc rgs, 1 "/"      ▸   'punct regexp triple'
        inc rgs, 2 "/"      ▸   'punct regexp triple'
        inc rgs, 3 "a"      ▸   'text regexp triple'
        inc rgs, 4 "/"      ▸   'punct regexp triple'
        inc rgs, 5 "/"      ▸   'punct regexp triple'
        inc rgs, 6 "/"      ▸   'punct regexp triple'
        inc rgs, 8 "b"      ▸   'text'
        
        dss = dissect "///\na\n///"
        inc dss[0], 0 "/"   ▸   'punct regexp triple'
        inc dss[0], 1 "/"   ▸   'punct regexp triple'
        inc dss[0], 2 "/"   ▸   'punct regexp triple'
        inc dss[1], 0 "a"   ▸   'text regexp triple'
        inc dss[2], 0 "/"   ▸   'punct regexp triple'
        inc dss[2], 1 "/"   ▸   'punct regexp triple'
        inc dss[2], 2 "/"   ▸   'punct regexp triple'
        
        dss = dissect """
            ///
                ([\\\\?]) # comment
            ///, a
            """
        inc dss[0], 0  "/"      ▸ 'punct regexp triple'
        inc dss[0], 1  "/"      ▸ 'punct regexp triple'
        inc dss[0], 2  "/"      ▸ 'punct regexp triple'
        inc dss[1], 4  "("      ▸ 'punct minor regexp triple'
        inc dss[1], 6  "\\"     ▸ 'punct escape regexp triple'
        inc dss[1], 12 "#"      ▸ 'punct comment'
        inc dss[1], 14 "comment" ▸ 'comment'
        inc dss[2], 0  "/"      ▸ 'punct regexp triple'
        inc dss[2], 1  "/"      ▸ 'punct regexp triple'
        inc dss[2], 2  "/"      ▸ 'punct regexp triple'
        inc dss[2], 5  "a"      ▸ 'text'
        
        dss = dissect """
            arr = [ ///a\#{b}///
                    key: 'value'
                  ]
            """
        inc dss[1], 8 'key'     ▸ 'dictionary key'
    
    # 000   000  00000000   0000000   0000000    00000000  00000000   
    # 000   000  000       000   000  000   000  000       000   000  
    # 000000000  0000000   000000000  000   000  0000000   0000000    
    # 000   000  000       000   000  000   000  000       000   000  
    # 000   000  00000000  000   000  0000000    00000000  000   000  
    
    ▸ comment header
    
        rgs = ranges "# 0 00 0000" 
        inc rgs, 0  "#"     ▸ 'punct comment'
        inc rgs, 2  "0"     ▸ 'comment header'
        inc rgs, 4  "00"    ▸ 'comment header'
        inc rgs, 7  "0000"  ▸ 'comment header'
    
        dss = dissect "###\n 0 00 0 \n###"
        inc dss[1], 1 "0"   ▸ 'comment triple header'
        
        rgs = ranges "# 0 * 0.2"
        inc rgs, 2 '0'      ▸ 'comment'
        inc rgs, 6 '0'      ▸ 'comment'
        
        dss = dissect "###\n 0 1 0 \n###"
        inc dss[1], 1 "0"   ▸ 'comment triple'
                
        