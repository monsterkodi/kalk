###
 0000000   00000000   00000000  00000000    0000000   000000000   0000000   00000000   
000   000  000   000  000       000   000  000   000     000     000   000  000   000  
000   000  00000000   0000000   0000000    000000000     000     000   000  0000000    
000   000  000        000       000   000  000   000     000     000   000  000   000  
 0000000   000        00000000  000   000  000   000     000      0000000   000   000  
###

use ./utils ▪ kc ke

▸ operator

    #  0000000  000       0000000   00     00  00000000   
    # 000       000      000   000  000   000  000   000  
    # 000       000      000000000  000000000  00000000   
    # 000       000      000   000  000 0 000  000        
    #  0000000  0000000  000   000  000   000  000        
    
    ▸ clamp
    
        ke  "clamp 1 10 12"         ▸ 10
        ke  "clamp 1 10 -1"         ▸ 1
        ke  "clamp 1 10"            ▸ 1
        ke  "clamp 1 10 null"       ▸ 1
        ke  "clamp 1 10 {}"         ▸ 1
        ke  "clamp 1 10 Infinity"   ▸ 10
        ke  "clamp 1 10 -Infinity"  ▸ 1
        ke  "clamp 1 10 NaN"        ▸ 1

        ke  "clamp -1 10 12"        ▸ 10
        ke  "clamp -1 10 -2"        ▸ -1
        ke  "clamp -1 10"           ▸ -1
        ke  "clamp -1 10 null"      ▸ -1
        ke  "clamp -1 10 {}"        ▸ -1
        ke  "clamp -1 10 Infinity"  ▸ 10
        ke  "clamp -1 10 -Infinity" ▸ -1
        ke  "clamp -1 10 NaN"       ▸ -1

        ke  "clamp 10.1 2.2 12"         ▸ 10.1
        ke  "clamp 10.1 2.2 -2"         ▸ 2.2
        ke  "clamp 10.1 2.2"            ▸ 2.2
        ke  "clamp 10.1 2.2 null"       ▸ 2.2
        ke  "clamp 10.1 2.2 {}"         ▸ 2.2
        ke  "clamp 10.1 2.2 Infinity"   ▸ 10.1
        ke  "clamp 10.1 2.2 -Infinity"  ▸ 2.2
        ke  "clamp 10.1 2.2 NaN"        ▸ 2.2

        ke  "clamp 5 5 12"          ▸ 5
        ke  "clamp 5 5 -2"          ▸ 5
        ke  "clamp 5 5"             ▸ 5
        ke  "clamp 5 5 null"        ▸ 5
        ke  "clamp 5 5 {}"          ▸ 5
        ke  "clamp 5 5 Infinity"    ▸ 5
        ke  "clamp 5 5 -Infinity"   ▸ 5
        ke  "clamp 5 5 NaN"         ▸ 5
        
        ke  "clamp '1' '2' '3'"          ▸ 2
        ke  "clamp '1.12' '2.23' '3.34'" ▸ 2.23
        
        ke  "clamp null NaN 5"          ▸ 5
        ke  "clamp null 4 -3"           ▸ 0
        ke  "clamp null 4 2"            ▸ 2
        ke  "clamp null 4 5"            ▸ 4
        ke  "clamp NaN 4 -3"            ▸ -3
        ke  "clamp NaN 4 5"             ▸ 5
        ke  "clamp NaN 4 7"             ▸ 7
        ke  "clamp 4 NaN 5"             ▸ 5
        ke  "clamp 4 NaN 3"             ▸ 3
        ke  "clamp 4 NaN -2"            ▸ -2
        ke  "clamp 4 null -3"           ▸ 0
        ke  "clamp 4 null 2"            ▸ 2
        ke  "clamp 4 null 5"            ▸ 4
        ke  "clamp null null null"      ▸ 0
        ke  "clamp null null"           ▸ 0
        ke  "clamp null"                ▸ NaN
        ke  "clamp()"                   ▸ NaN
        ke  "clamp NaN NaN NaN"         ▸ NaN
        
    # 000  000   000  000000000  
    # 000  0000  000     000     
    # 000  000 0 000     000     
    # 000  000  0000     000     
    # 000  000   000     000     
    
    ▸ int
    
        ke  "int 1.234"         ▸ 1 
        ke  "int '2.34'"        ▸ 2 

    # 00000000  000       0000000    0000000   000000000  
    # 000       000      000   000  000   000     000     
    # 000000    000      000   000  000000000     000     
    # 000       000      000   000  000   000     000     
    # 000       0000000   0000000   000   000     000     
    
    ▸ float
    
        ke  "float 1.234"       ▸ 1.234 
        ke  "float '2.34'"      ▸ 2.34
        
    # 00000000  000  00000000    0000000  000000000  
    # 000       000  000   000  000          000     
    # 000000    000  0000000    0000000      000     
    # 000       000  000   000       000     000     
    # 000       000  000   000  0000000      000     
    
    ▸ first
    
        ke  "first []"          ▸ undefined
        ke  "first [1]"         ▸ 1
        ke  "first [1 2]"       ▸ 1
        ke  "first [null 2]"    ▸ null
        ke  "first [[3,4] 2]"   ▸ [3,4]
        ke  "first 'abc'"       ▸ 'a'
        ke  "first 1"           ▸ undefined
        ke  "first {}"          ▸ undefined
        ke  "first null"        ▸ null
        
        ke  "first([1 2]) == 1" ▸ true
        ke  "first [1 2]  == 1" ▸ true
        ke  "a = [1 2]; first a == 1" ▸ true

    # 000       0000000    0000000  000000000  
    # 000      000   000  000          000     
    # 000      000000000  0000000      000     
    # 000      000   000       000     000     
    # 0000000  000   000  0000000      000     
    
    ▸ last
    
        ke  "last []"           ▸ undefined
        ke  "last [1]"          ▸ 1
        ke  "last [1 2]"        ▸ 2
        ke  "last [null 2]"     ▸ 2
        ke  "last [[3,4] 2]"    ▸ 2
        ke  "last 'abc'"        ▸ 'c'
        ke  "last 1"            ▸ undefined
        ke  "last {}"           ▸ undefined
        ke  "last null"         ▸ null
        
        ke  "last([1 2]) == 2"  ▸ true
        ke  "last [1 2]  == 2"  ▸ true
        ke  "a = [1 2]; last a == 2"  ▸ true
        
        kc "last(ctx.stack)"      ▸ "_k_.last(ctx.stack)"
        kc "last(ctx.stack)[1..]" ▸ "_k_.last(ctx.stack).slice(1)"
        kc "last [[3,4] 2]"       ▸ "_k_.last([[3,4],2])"
        kc "lr = lr[last(ctx.stack)[1..]]" ▸ "lr = lr[_k_.last(ctx.stack).slice(1)]"
        kc "if f.match == '{' and last(block.fillet).match == '}'" ▸ "if (f.match === '{' && _k_.last(block.fillet).match === '}')\n{\n}"
        ke "last = 2; '01x3'[last]" ▸ "x"
        ke "end=4\nlast = 2\na = []\nfor i in [last...end] ➜ a.push i\na" ▸ [2,3]
        
        kc "last(@tokenStack).name" ▸ "_k_.last(this.tokenStack).name"
        
        # last(...)? doesn't work!
        # kc "last(@tokenStack)?.classType" ▸ "((_k_.last(this.tokenStack) != null ? _k_.last(this.tokenStack).classType) : undefined)"
        
    # 00     00  000  000   000  
    # 000   000  000  0000  000  
    # 000000000  000  000 0 000  
    # 000 0 000  000  000  0000  
    # 000   000  000  000   000  
    
    ▸ min
    
        ke  "min()"                         ▸ Infinity
        ke  "min null"                      ▸ Infinity
        ke  "min []"                        ▸ Infinity
        ke  "min {}"                        ▸ Infinity
        ke  "min null 3"                    ▸ 3
        ke  "min [] 3"                      ▸ 3
        ke  "min {} 3"                      ▸ 3
        ke  "min 2 1"                       ▸ 1
        ke  "min 3 2 1"                     ▸ 1
        ke  "min [3 2 1]"                   ▸ 1
        ke  "min [5 6] 4 [3 2]"             ▸ 2
        ke  "min [8 [9 [10 [7 6]]]]"        ▸ 6
        ke  "min '2.2' '1.1'"               ▸ 1.1

        ke  "min NaN, 2 1"                  ▸ 1
        ke  "min NaN, 3 2 1"                ▸ 1
        ke  "min NaN, [3 2 1]"              ▸ 1
        ke  "min NaN, [5 6], 4 [3 2]"       ▸ 2
        ke  "min NaN, [8 [9 [10 [7 6]]]]"   ▸ 6
        
    # 00     00   0000000   000   000  
    # 000   000  000   000   000 000   
    # 000000000  000000000    00000    
    # 000 0 000  000   000   000 000   
    # 000   000  000   000  000   000  
    
    ▸ max
    
        ke  "max()"                         ▸ -Infinity
        ke  "max null"                      ▸ -Infinity
        ke  "max []"                        ▸ -Infinity
        ke  "max {}"                        ▸ -Infinity
        ke  "max null 3"                    ▸ 3
        ke  "max [] 3"                      ▸ 3
        ke  "max {} 3"                      ▸ 3
        ke  "max 2 1"                       ▸ 2
        ke  "max 1 2 3"                     ▸ 3
        ke  "max [1 2 3]"                   ▸ 3
        ke  "max [5 6], 4 [3 2]"            ▸ 6
        ke  "max [8 [9 [10 [7 6]]]]"        ▸ 10
        ke  "max '2.2' '1.1'"               ▸ 2.2
        
        ke  "max NaN, 2 1"                  ▸ 2
        ke  "max NaN, 3 2 1"                ▸ 3
        ke  "max NaN, [3 2 1]"              ▸ 3
        ke  "max NaN, [5 6], 4 [3 2]"       ▸ 6
        ke  "max NaN, [8 [9 [10 [7 16]]]]"  ▸ 16
        
    #  0000000  000       0000000   000   000  00000000  
    # 000       000      000   000  0000  000  000       
    # 000       000      000   000  000 0 000  0000000   
    # 000       000      000   000  000  0000  000       
    #  0000000  0000000   0000000   000   000  00000000  
    
    ▸ clone
    
        ke  """
            a = b:1 c: d: 3
            c = clone a
            """ ▸
            b:1 c: d: 3
            
        ke  """
            a = b:1 c: d: 3
            c = clone a
            noon c
            """ ▸
            """
            b   1
            c
                d   3
            """
        ke  "clone 0" ▸ 0
        ke  "clone 1" ▸ 1
        ke  "clone 'a'" ▸ 'a'
        ke  "clone null" ▸ null
        ke  "clone undefined" ▸ undefined
        ke  "clone Infinity" ▸ Infinity
        ke  "clone []" ▸ []
        ke  "clone [1]" ▸ [1]
        ke  "clone [null]" ▸ [null]
        ke  "clone a:null" ▸ a:null
        kc  "f e+1, copy d" ▸ 'f(e + 1,_k_.copy(d))'

    # 00000000   0000000   000      
    # 000       000   000  000      
    # 0000000   000 00 00  000      
    # 000       000 0000   000      
    # 00000000   00000 00  0000000  
    
    ▸ eql
    
        ke  """
            a = [1 2 3]
            b = [1 2]
            b.push 3
            a eql b
            """ ▸ true

        ke  """
            a = [1 2 3]
            b = [1 2].concat [3]
            p = hello:a, world:b
            q = hello:b, world:a
            p eql q
            """ ▸ true
    
    # 00000000  00     00  00000000   000000000  000   000  
    # 000       000   000  000   000     000      000 000   
    # 0000000   000000000  00000000      000       00000    
    # 000       000 0 000  000           000        000     
    # 00000000  000   000  000           000        000     
    
    ▸ empty

        kc  """
            if empty [] == false
                1234
            """ ▸
            """
            if (_k_.empty([]) === false)
            {
                1234
            }
            """
            
        ke  "a = []; empty a"           ▸   true
        ke  "a = {}; empty a"           ▸   true
        ke  "a = ''; empty a"           ▸   true
        ke  "a = null; empty a"         ▸   true
        ke  "a = undefined; empty a"    ▸   true
        ke  "a = NaN; empty a"          ▸   true
        ke  'empty 1 or empty {}'       ▸   true
        ke  'empty {} or empty 1'       ▸   true
        ke  "a = Infinity; empty a"     ▸   false
        ke  "a = 0; empty a"            ▸   false
        ke  "a = 'a'; empty a"          ▸   false
        ke  "a = Infinity; empty a"     ▸   false
        ke  "a = [null]; empty a"       ▸   false
        ke  "a = {a:null}; empty a"     ▸   false
        ke  "a = [[]]; empty a"         ▸   false
        ke  'empty "x" or valid {}'     ▸   false
        ke  'empty {} and valid []'     ▸   false
        
    # 000   000   0000000   000      000  0000000    
    # 000   000  000   000  000      000  000   000  
    #  000 000   000000000  000      000  000   000  
    #    000     000   000  000      000  000   000  
    #     0      000   000  0000000  000  0000000    
    
    ▸ valid
        
        ke  "valid []"                  ▸   false
        ke  "valid {}"                  ▸   false
        ke  "valid ''"                  ▸   false
        ke  "valid null"                ▸   false
        ke  "valid undefined"           ▸   false
        ke  "valid NaN"                 ▸   false
        ke  'valid {} and valid 0'      ▸   false
        ke  "valid Infinity"            ▸   true
        ke  "valid 0"                   ▸   true
        ke  "valid 'a'"                 ▸   true
        ke  "valid [null]"              ▸   true
        ke  "valid {a:null}"            ▸   true
        ke  "valid [[]]"                ▸   true
        ke  'valid {} or valid 1'       ▸   true
        ke  "valid 'a' or valid ''"     ▸   true
        ke  "valid 'a' and empty ''"    ▸   true
        
    # 00000000    0000000   0000000    
    # 000   000  000   000  000   000  
    # 00000000   000000000  000   000  
    # 000        000   000  000   000  
    # 000        000   000  0000000    
    
    ▸ lpad
    
        ke  "lpad 10"               ▸  "          "
        ke  "lpad 10 'l'"           ▸  "         l"
        ke  "lpad 10 'l' '*'"       ▸  "*********l"
        ke  "lpad 10 ''  '*'"       ▸  "**********"
        ke  "lpad 10 'l' '+-'"      ▸  "+-+-+-+-+-l"
        ke  "lpad 5  '1234567890'"  ▸  "1234567890"
        
    ▸ rpad
    
        ke  "rpad 10"               ▸  "          "
        ke  "rpad 10 'r'"           ▸  "r         "
        ke  "rpad 10 'r' '*'"       ▸  "r*********"
        ke  "rpad 10 ''  '*'"       ▸  "**********"
        ke  "rpad 10 'r' '%#'"      ▸  "r%#%#%#%#%#"
        ke  "rpad 5  '1234567890'"  ▸  "1234567890"
        
    ▸ trim
    
        ke  "trim  '   x   '"  ▸ 'x'
        ke  "ltrim '   x   '"  ▸ 'x   '
        ke  "rtrim '   x   '"  ▸ '   x'
        
        ke  "trim  'babab   x   bababa' 'ab'"  ▸ '   x   '
        ke  "ltrim 'babab   x   bababa' 'ab'"  ▸ '   x   bababa'
        ke  "rtrim 'babab   x   bababa' 'ab'"  ▸ 'babab   x   '
        
    # 000   000   0000000    0000000   000   000  
    # 0000  000  000   000  000   000  0000  000  
    # 000 0 000  000   000  000   000  000 0 000  
    # 000  0000  000   000  000   000  000  0000  
    # 000   000   0000000    0000000   000   000  
    
    ▸ noon
    
        kc  'opt = noon.parse "1"'      ▸   'opt = noon.parse("1")'
        
    # 000000000  000   000  00000000   00000000   0000000   00000000  
    #    000      000 000   000   000  000       000   000  000       
    #    000       00000    00000000   0000000   000   000  000000    
    #    000        000     000        000       000   000  000       
    #    000        000     000        00000000   0000000   000       
    
    ▸ typeof

        kc  """
            if typeof pat == 'string'
                1
            """ ▸
            """
            if (typeof(pat) === 'string')
            {
                1
            }
            """

    # 000  000   000   0000000  000000000   0000000   000   000   0000000  00000000   0000000   00000000
    # 000  0000  000  000          000     000   000  0000  000  000       000       000   000  000
    # 000  000 0 000  0000000      000     000000000  000 0 000  000       0000000   000   000  000000
    # 000  000  0000       000     000     000   000  000  0000  000       000       000   000  000
    # 000  000   000  0000000      000     000   000  000   000   0000000  00000000   0000000   000

    ▸ instanceof

        kc  'a instanceof b'            ▸   'a instanceof b'
        kc  'a instanceof b == true'    ▸   'a instanceof b === true'
        
        