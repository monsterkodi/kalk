###
0000000     0000000    0000000  000   0000000   0000000  
000   000  000   000  000       000  000       000       
0000000    000000000  0000000   000  000       0000000   
000   000  000   000       000  000  000            000  
0000000    000   000  0000000   000   0000000  0000000   
###

use ./utils ▪ kc

▸ basics

    # 000      000  000000000  00000000  00000000    0000000   000       0000000
    # 000      000     000     000       000   000  000   000  000      000
    # 000      000     000     0000000   0000000    000000000  000      0000000
    # 000      000     000     000       000   000  000   000  000           000
    # 0000000  000     000     00000000  000   000  000   000  0000000  0000000

    ▸ literals

        kc  ''                ▸ ''
        kc  ' '               ▸ ''
        kc  'a'               ▸ 'a'
        kc  '1'               ▸ '1'
        kc  '2.2'             ▸ '2.2'
        kc  '0xfff'           ▸ '0xfff'
        kc  '0o666'           ▸ '0o666'
        kc  '""'              ▸ '""'
        kc  "''"              ▸ "''"
        kc  '[]'              ▸ ';[]'
        kc  '()'              ▸ ';()'
        kc  '{}'              ▸ '{}'
        kc  'true'            ▸ 'true'
        kc  'false'           ▸ 'false'
        kc  'yes'             ▸ 'true'
        kc  'no'              ▸ 'false'
        kc  'Infinity'        ▸ 'Infinity'
        kc  'NaN'             ▸ 'NaN'
        kc  'null'            ▸ 'null'
        kc  'undefined'       ▸ 'undefined'

    # 00000000   00000000    0000000   00000000
    # 000   000  000   000  000   000  000   000
    # 00000000   0000000    000   000  00000000
    # 000        000   000  000   000  000
    # 000        000   000   0000000   000

    ▸ prop

        kc  'a.a'             ▸ 'a.a'
        kc  '{a:b}.a'         ▸ '{a:b}.a'
        kc  'a.b.c d'         ▸ 'a.b.c(d)'
        kc  'a.b.c[d]'        ▸ 'a.b.c[d]'
        kc  '[a.b*c[d]]'      ▸ ';[a.b * c[d]]'

    # 00000000   00000000   0000000   00000000  000   000
    # 000   000  000       000        000        000 000
    # 0000000    0000000   000  0000  0000000     00000
    # 000   000  000       000   000  000        000 000
    # 000   000  00000000   0000000   00000000  000   000

    ▸ regex

        kc  '/a/'                   ▸ '/a/'
        kc  '/a|b/'                 ▸ '/a|b/'
        kc  '/(a|b)/'               ▸ '/(a|b)/'
        kc  '/(a|b)/g'              ▸ '/(a|b)/g'
        kc  '/\\//gimsuy'           ▸ '/\\//gimsuy'
        kc  'ESCAPEREGEXP = /[-\\^$*+?.()|[\\]{}\\/]/g' ▸ 'ESCAPEREGEXP = /[-\\^$*+?.()|[\\]{}\\/]/g'
        kc  'ESCAPEREGEXP = /[\-\\\^\$\*\+\?\.\(\)\|\[\]\{\}\/]/g' ▸ 'ESCAPEREGEXP = /[\-\\\^\$\*\+\?\.\(\)\|\[\]\{\}\/]/g'

        # todo: fix the lexers' regex detection
        
        kc  'f c(@x/v)*v, d(@y/v)*v' ▸ 'f(c(this.x / v) * v,d(this.y / v) * v)'

    #  0000000   00000000
    # 000   000  000   000
    # 000   000  00000000
    # 000   000  000
    #  0000000   000

    ▸ op

        ▸ eql
            
            kc  'a == b'            ▸ 'a === b'
            kc  'a != b'            ▸ 'a !== b'
            
        ▸ brackets
        
            kc  '(1/7)'             ▸ ';(1 / 7)'
            kc  'n/7'               ▸ 'n / 7'
            kc  'n/2/7'             ▸ 'n / 2 / 7'
            kc  'n/(3/7)'           ▸ 'n / (3 / 7)'
            kc  'f n/(4/7)'         ▸ 'f(n / (4 / 7))'

        ▸ logigal
            
            kc  'a and b'           ▸ 'a && b'
            kc  '1 and 2 and 3'     ▸ '1 && 2 && 3'
            kc  'e and (f or g)'    ▸ 'e && (f || g)'
            kc  '(e and f) or g'    ▸ ';(e && f) || g'
    
            kc  """
                a and \
                b or \
                c
                """ ▸
                """
                a && b || c
                """
    
            kc  """
                d and
                    e or f and
                        g or h
                """ ▸
                """
                d && e || f && g || h
                """
    
            kc  """
                d and
                e or f and
                g or h
                """ ▸ 
                """
                d && e || f && g || h
                """
    
            kc  """
                a = d and
                    e or f and
                    g or h
                """ ▸
                """
                a = d && e || f && g || h
                """

        ▸ compchain
                
            kc  """
                b = 1 <= a < c
                """ ▸
                """
                b = (1 <= a && a < c)
                """
    
            kc  """
                x = y > z >= 1
                """ ▸
                """
                x = (y > z && z >= 1)
                """
    
            kc  """
                a = b == c == d
                """ ▸
                """
                a = (b === c && c === d)
                """
    
            kc  """
                a = b != c != d
                """ ▸
                """
                a = (b !== c && c !== d)
                """
                
            kc  """
                if 1 and (opt.text is str or 2)
                """ ▸
                """
                if (1 && (_k_.isStr(opt.text) || 2))
                {
                }
                """
                
        ▸ binary
        
            kc "f a|b, x | y, c|d | e| f" ▸ 'f(a | b,x | y,c | d | e | f)'
            
            kc 'a ^= b' 'a ^= b'
            
        # 000   000   0000000   000000000  
        # 0000  000  000   000     000     
        # 000 0 000  000   000     000     
        # 000  0000  000   000     000     
        # 000   000   0000000      000     
        
        ▸ not
            
            kc  'not true'      ▸   '!true'
            kc  'not c1 or c2'  ▸   '!c1 || c2'
            kc  'not (x > 0)'   ▸   '!(x > 0)'
            kc  'not x == 0'    ▸   '!x === 0'
            kc  'if not m = t'  ▸   'if (!(m = t))\n{\n}'
            
    #  0000000    0000000   0000000  000   0000000   000   000
    # 000   000  000       000       000  000        0000  000
    # 000000000  0000000   0000000   000  000  0000  000 0 000
    # 000   000       000       000  000  000   000  000  0000
    # 000   000  0000000   0000000   000   0000000   000   000

    ▸ assign

        kc  'a = b'            ▸    'a = b'
        kc  'a = b = c = 1'    ▸    'a = b = c = 1'

        kc  """
            module.exports = sthg
            log 'ok'
            """ ▸
            """
            module.exports = sthg
            console.log('ok')
            """

        kc  """
            a = b = c = sthg == othr
            log 'ok'
            """ ▸
            """
            a = b = c = sthg === othr
            console.log('ok')
            """

        kc  """
            d = a and
            b or
                c
            """ ▸
            """
            d = a && b || c
            """

        kc  """
            d = a and
                b or
                    c
            """ ▸
            """
            d = a && b || c
            """

        kc  """
            d = a and
                b or
                c
            """ ▸
            """
            d = a && b || c
            """
            
        kc  """
            r = 1 + p = 2 + 3
            """ ▸
            """
            r = 1 + (p = 2 + 3)
            """
            
        kc  """
            q = ((r) +
                 (x))
            """ ▸
            """
            q = ((r) + (x))
            """

    # 00     00   0000000   000000000  000   000
    # 000   000  000   000     000     000   000
    # 000000000  000000000     000     000000000
    # 000 0 000  000   000     000     000   000
    # 000   000  000   000     000     000   000

    ▸ math

        kc  'a + b'             ▸   'a + b'
        kc  'a - b + c - 1'     ▸   'a - b + c - 1'
        kc  '-a+-b'             ▸   '-a + -b'
        kc  '+a+-b'             ▸   '+a + -b'
        kc  'a + -b'            ▸   'a + -b'
        kc  'a+ -b'             ▸   'a + -b'
        kc  'a + -(b-c)'        ▸   'a + -(b - c)'
        kc  'b --c'             ▸   'b(--c)'
        kc  'a + -b --c'        ▸   'a + -b(--c)'
        kc  'a -b'              ▸   'a(-b)'
        kc  '-a -b'             ▸   '-a(-b)'
        kc  '-a +b'             ▸   '-a(+b)'
        kc  '+a -b'             ▸   '+a(-b)'

    # 000  000   000   0000000  00000000   00000000  00     00  00000000  000   000  000000000
    # 000  0000  000  000       000   000  000       000   000  000       0000  000     000
    # 000  000 0 000  000       0000000    0000000   000000000  0000000   000 0 000     000
    # 000  000  0000  000       000   000  000       000 0 000  000       000  0000     000
    # 000  000   000   0000000  000   000  00000000  000   000  00000000  000   000     000

    ▸ increment

        kc  'a++'               ▸   'a++'
        kc  'a--'               ▸   'a--'
        kc  '++a'               ▸   '++a'
        kc  '--a'               ▸   '--a'
        kc  '--a,++b'           ▸   '--a\n++b'

        kc  'a[1]++'            ▸   'a[1]++'
        kc  'a[1]--'            ▸   'a[1]--'
        kc  '--a[1]'            ▸   '--a[1]'
        kc  '++a[1]'            ▸   '++a[1]'

        kc  'a.b.c++'           ▸   'a.b.c++'
        kc  'a.b.c--'           ▸   'a.b.c--'

        kc  'a(b).c++'          ▸   'a(b).c++'
        kc  'a(b).c--'          ▸   'a(b).c--'

        kc  '(--b)'             ▸   ';(--b)'
        kc  '(++b)'             ▸   ';(++b)'
        kc  '(b--)'             ▸   ';(b--)'
        kc  '(b++)'             ▸   ';(b++)'
        kc  'log(++b)'          ▸   'console.log(++b)'
        kc  'log(++{b:1}.b)'    ▸   'console.log(++{b:1}.b)'

        if false
            kc  ('--a++')       ▸  ''
            kc  ('--a--')       ▸  ''
            kc  ('++a++')       ▸  ''
            kc  ('++a--')       ▸  ''
            kc  ('++--')        ▸  ''
            kc  ('++1')         ▸  ''
            kc  ('1--')         ▸  ''
            kc  ('""++')        ▸  ''
            