###
 0000000   00000000    0000000    0000000
000   000  000   000  000        000     
000000000  0000000    000  0000  0000000 
000   000  000   000  000   000       000
000   000  000   000   0000000   0000000 
###

use ./utils ▪ kc ke kd

▸ args

    # 00000000  000   000  000   000   0000000  
    # 000       000   000  0000  000  000       
    # 000000    000   000  000 0 000  000       
    # 000       000   000  000  0000  000       
    # 000        0000000   000   000   0000000  
    
    ▸ func
    
        kc  """
            f = a -> a
            """ ▸
            """
            
            f = function (a)
            {
                return a
            }
            """
            
        kc  """
            f = a b -> a + b
            """ ▸
            """
            
            f = function (a, b)
            {
                return a + b
            }
            """
            
        kc  """
            f = a b=0 -> a + b
            """ ▸
            """
            
            f = function (a, b = 0)
            {
                return a + b
            }
            """
            
        kc  """
            f = a.map -> 
            """ ▸
            """
            f = a.map(function ()
            {})
            """

        kc  """
            f = a() -> 
            """ ▸
            """
            f = a()(function ()
            {})
            """
            
    # 00000000  000   000  000   000   0000000  000000000  000   0000000   000   000  
    # 000       000   000  0000  000  000          000     000  000   000  0000  000  
    # 000000    000   000  000 0 000  000          000     000  000   000  000 0 000  
    # 000       000   000  000  0000  000          000     000  000   000  000  0000  
    # 000        0000000   000   000   0000000     000     000   0000000   000   000  
    
    ▸ function
    
        kc  """
            function D
                f: a b -> a + b
            """ ▸
            """
            
            D = (function ()
            {
                function D ()
                {}
            
                D.prototype["f"] = function (a, b)
                {
                    return a + b
                }
            
                return D
            })()
            
            """

    #  0000000  000       0000000    0000000   0000000  
    # 000       000      000   000  000       000       
    # 000       000      000000000  0000000   0000000   
    # 000       000      000   000       000       000  
    #  0000000  0000000  000   000  0000000   0000000   
    
    ▸ class
    
        kc  """
            class D
                f: a b -> a + b
            """ ▸
            """
            class D
            {
                f (a, b)
                {
                    return a + b
                }
            }
            
            """
            
    #  0000000   0000000          000  00000000   0000000  000000000  
    # 000   000  000   000        000  000       000          000     
    # 000   000  0000000          000  0000000   000          000     
    # 000   000  000   000  000   000  000       000          000     
    #  0000000   0000000     0000000   00000000   0000000     000     
    
    ▸ object
    
        kc  """
            obj =
                f: (a,b) -> a + b
            """ ▸
            """
            obj = {f:function (a, b)
            {
                return a + b
            }}
            """
                
        kc  """
            obj =
                f: a b -> a + b
            """ ▸
            """
            obj = {f:function (a, b)
            {
                return a + b
            }}
            """
            
    # 000   000   0000000   00000000    0000000   00000000    0000000    0000000  
    # 000   000  000   000  000   000  000   000  000   000  000        000       
    #  000 000   000000000  0000000    000000000  0000000    000  0000  0000000   
    #    000     000   000  000   000  000   000  000   000  000   000       000  
    #     0      000   000  000   000  000   000  000   000   0000000   0000000   
    
    ▸ varargs
    
        kc  """
            obj = 
                zip: (args...) ->
            """ ▸
            """
            obj = {zip:function (...args)
            {}}
            """
            
        kc  """
            obj = 
                zip: args... ->
            """ ▸
            """
            obj = {zip:function (...args)
            {}}
            """

        kc  """
            obj = 
                zip: a b c... ->
            """ ▸
            """
            obj = {zip:function (a, b, ...c)
            {}}
            """
            
    # 00000000   00000000    0000000   00000000    0000000   00000000    0000000    0000000  
    # 000   000  000   000  000   000  000   000  000   000  000   000  000        000       
    # 00000000   0000000    000   000  00000000   000000000  0000000    000  0000  0000000   
    # 000        000   000  000   000  000        000   000  000   000  000   000       000  
    # 000        000   000   0000000   000        000   000  000   000   0000000   0000000   
    
    ▸ propargs
    
        kc  """
            obj = 
                pullAll: (arr, items, cmp=util.isEqual) ->
            """ ▸ 
            """
            obj = {pullAll:function (arr, items, cmp = util.isEqual)
            {}}
            """
            
        kc  """
            obj = 
                fnc: cmp=util.isEqual ->
            """ ▸ 
            """
            obj = {fnc:function (cmp = util.isEqual)
            {}}
            """
            
        kc  """
            obj = 
                fnc: a b=d.c c=x.y.z ->
            """ ▸ 
            """
            obj = {fnc:function (a, b = d.c, c = x.y.z)
            {}}
            """
            
    #  0000000   0000000   000   000   0000000  000000000  00000000   000   000   0000000  000000000   0000000   00000000   
    # 000       000   000  0000  000  000          000     000   000  000   000  000          000     000   000  000   000  
    # 000       000   000  000 0 000  0000000      000     0000000    000   000  000          000     000   000  0000000    
    # 000       000   000  000  0000       000     000     000   000  000   000  000          000     000   000  000   000  
    #  0000000   0000000   000   000  0000000      000     000   000   0000000    0000000     000      0000000   000   000  
    
    ▸ constructor

        kc  """
            function D
                @: a b -> a + b
            """ ▸
            """
            
            D = (function ()
            {
                function D (a, b)
                {
                    a + b
                }
            
                return D
            })()
            
            """
    
        kc  """
            class D
                @: a b -> a + b
            """ ▸
            """
            class D
            {
                constructor (a, b)
                {
                    a + b
                }
            }
            
            """
            
    # 000000000  000   000  000   0000000  
    #    000     000   000  000  000       
    #    000     000000000  000  0000000   
    #    000     000   000  000       000  
    #    000     000   000  000  0000000   
    
    ▸ this
    
        kc  """
            class D
                t: @a ->
            """ ▸
            """
            class D
            {
                t (a)
                {
                    this.a = a
                }
            }
            
            """
    
        kc  """
            class D
                t: @a @b -> @a + @b
            """ ▸
            """
            class D
            {
                t (a, b)
                {
                    this.a = a
                    this.b = b
                
                    return this.a + this.b
                }
            }
            
            """
    
    # 0000000    00000000  00000000   0000000   000   000  000      000000000  
    # 000   000  000       000       000   000  000   000  000         000     
    # 000   000  0000000   000000    000000000  000   000  000         000     
    # 000   000  000       000       000   000  000   000  000         000     
    # 0000000    00000000  000       000   000   0000000   0000000     000     
    
    ▸ default
            
        kc  """
            class D
                d: a=1 -> a
            """ ▸
            """
            class D
            {
                d (a = 1)
                {
                    return a
                }
            }
            
            """

        kc  """
            class D
                d: a='2' -> a
            """ ▸
            """
            class D
            {
                d (a = '2')
                {
                    return a
                }
            }
            
            """

        kc  """
            class D
                d: a b=2 d='3' -> a
            """ ▸
            """
            class D
            {
                d (a, b = 2, d = '3')
                {
                    return a
                }
            }
            
            """
            
        kc  """
            class D
                d: a=@b -> a
            """ ▸
            """
            class D
            {
                d (a = this.b)
                {
                    return a
                }
            }
            
            """

        kc  """
            class D
                d: a={} -> a
            """ ▸
            """
            class D
            {
                d (a = {})
                {
                    return a
                }
            }
            
            """

        kc  """
            class D
                d: a=[] -> a
            """ ▸
            """
            class D
            {
                d (a = [])
                {
                    return a
                }
            }
            
            """
            