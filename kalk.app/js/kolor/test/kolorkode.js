var toExport = {}
var _k_ = {list: function (l) {return l != null ? typeof l.length === 'number' ? l : [] : []}}

var inc, ranges, rgs

import kolor from "../kolor.js"


inc = function (rgs, start, match)
{
    var r

    var list = _k_.list(rgs)
    for (var _12_10_ = 0; _12_10_ < list.length; _12_10_++)
    {
        r = list[_12_10_]
        if (r.start === start && r.match === match)
        {
            return r.clss
        }
    }
    console.log('fail',rgs)
    console.log('expected',match)
}

ranges = function (s)
{
    return kolor.ranges(s,'kode')
}
toExport["kode"] = function ()
{
    section("class", function ()
    {
        rgs = ranges("class Macro extends Command")
        compare(inc(rgs,0,'class'),'keyword')
        compare(inc(rgs,6,'Macro'),'class')
        compare(inc(rgs,12,'extends'),'keyword')
        compare(inc(rgs,20,'Command'),'class')
    })
    section("property", function ()
    {
        rgs = ranges("exist?.prop")
        compare(inc(rgs,7,'prop'),'property')
        rgs = ranges("obj.value = obj.another.value")
        compare(inc(rgs,0,"obj"),'obj')
        compare(inc(rgs,4,"value"),'property')
        compare(inc(rgs,12,"obj"),'obj')
        compare(inc(rgs,16,"another"),'property')
        compare(inc(rgs,24,"value"),'property')
        rgs = ranges("if someObject.someProp")
        compare(inc(rgs,0,"if"),'keyword')
        compare(inc(rgs,3,"someObject"),'obj')
        compare(inc(rgs,13,"."),'punct property')
        compare(inc(rgs,14,"someProp"),'property')
    })
    section("logic", function ()
    {
        rgs = ranges("a and b")
        compare(inc(rgs,0,"a"),'text')
        compare(inc(rgs,2,"and"),'keyword')
        rgs = ranges("if a then b")
        compare(inc(rgs,0,"if"),'keyword')
        compare(inc(rgs,3,"a"),'text')
        compare(inc(rgs,5,"then"),'keyword')
        compare(inc(rgs,10,"b"),'text')
        rgs = ranges("switch a")
        compare(inc(rgs,0,"switch"),'keyword')
    })
    section("dictionary", function ()
    {
        rgs = ranges(" a: b")
        compare(inc(rgs,1,"a"),'dictionary key')
        compare(inc(rgs,2,":"),'punct dictionary')
    })
    section("array", function ()
    {
        rgs = ranges("a[0].prop")
        compare(inc(rgs,3,']'),'punct')
        rgs = ranges("[ f ]")
        compare(inc(rgs,2,'f'),'text')
        rgs = ranges("[ f , f ]")
        compare(inc(rgs,2,'f'),'text')
    })
    section("range", function ()
    {
        rgs = ranges("a[...2]")
        compare(inc(rgs,2,'...'),'punct range ligature')
        rgs = ranges("a[ -1 .. ]")
        compare(inc(rgs,6,'..'),'punct range ligature')
        rgs = ranges("a[1..n]")
        compare(inc(rgs,3,'..'),'punct range ligature')
        rgs = ranges("a[ .... ]")
        compare(inc(rgs,3,'...'),'punct ligature')
        compare(inc(rgs,6,'.'),'punct')
        rgs = ranges("@f [1]")
        compare(inc(rgs,0,"@"),'punct function call')
        compare(inc(rgs,1,"f"),'function call')
        rgs = ranges("@f = 1")
        compare(inc(rgs,0,"@"),'punct this')
        compare(inc(rgs,1,"f"),'text this')
    })
    section("number", function ()
    {
        rgs = ranges("1 'a'")
        compare(inc(rgs,0,"1"),'number')
        rgs = ranges("@height/2 + @height/6")
        compare(inc(rgs,0,'@'),'punct this')
        compare(inc(rgs,1,'height'),'text this')
        compare(inc(rgs,8,"2"),'number')
    })
    section("function", function ()
    {
        rgs = ranges("obj.prop.call 1")
        compare(inc(rgs,0,'obj'),'obj')
        compare(inc(rgs,4,'prop'),'property')
        compare(inc(rgs,9,'call'),'function call')
        rgs = ranges("dolate: => ")
        compare(inc(rgs,8,'=>'),'punct function bound tail ligature')
        rgs = ranges("dolate: -> ")
        compare(inc(rgs,8,'->'),'punct function tail ligature')
        rgs = ranges("async ○->")
        compare(inc(rgs,6,'○'),'punct function async')
        compare(inc(rgs,7,'->'),'punct function tail ligature')
        rgs = ranges("@a @b 'c'")
        compare(inc(rgs,0,'@'),'punct function call')
        compare(inc(rgs,1,'a'),'function call')
        compare(inc(rgs,3,'@'),'punct function call')
        compare(inc(rgs,4,'b'),'function call')
        rgs = ranges("@a 3 @b '5'")
        compare(inc(rgs,0,'@'),'punct function call')
        compare(inc(rgs,1,'a'),'function call')
        rgs = ranges("fff 1")
        compare(inc(rgs,0,"fff"),'function call')
        rgs = ranges("f 'a'")
        compare(inc(rgs,0,"f"),'function call')
        rgs = ranges("ff 'b'")
        compare(inc(rgs,0,"ff"),'function call')
        rgs = ranges("ffff -1")
        compare(inc(rgs,0,"ffff"),'function call')
        rgs = ranges("f [1]")
        compare(inc(rgs,0,"f"),'function call')
        rgs = ranges("fffff {1}")
        compare(inc(rgs,0,"fffff"),'function call')
        rgs = ranges("i ++a")
        compare(inc(rgs,0,'i'),'function call')
        rgs = ranges("i +4")
        compare(inc(rgs,0,'i'),'function call')
        rgs = ranges("i -4")
        compare(inc(rgs,0,'i'),'function call')
        rgs = ranges("pos= (item, p) -> ")
        compare(inc(rgs,0,"pos"),'function')
    })
    section("no call", function ()
    {
        rgs = ranges("i != false")
        compare(inc(rgs,0,'i'),'text')
        rgs = ranges("i += 1")
        compare(inc(rgs,0,'i'),'text')
        rgs = ranges("i -= 1")
        compare(inc(rgs,0,'i'),'text')
        rgs = ranges("i *= 1")
        compare(inc(rgs,0,'i'),'text')
        rgs = ranges("i /= 1")
        compare(inc(rgs,0,'i'),'text')
        rgs = ranges("i ? false")
        compare(inc(rgs,0,'i'),'text')
        rgs = ranges("i < 3")
        compare(inc(rgs,0,'i'),'text')
        rgs = ranges("i > 3")
        compare(inc(rgs,0,'i'),'text')
        rgs = ranges("i + 3")
        compare(inc(rgs,0,'i'),'text')
        rgs = ranges("i - 3")
        compare(inc(rgs,0,'i'),'text')
        rgs = ranges("i * 3")
        compare(inc(rgs,0,'i'),'text')
        rgs = ranges("i / 3")
        compare(inc(rgs,0,'i'),'text')
        rgs = ranges("i % 3")
        compare(inc(rgs,0,'i'),'text')
        rgs = ranges("i = 3")
        compare(inc(rgs,0,'i'),'text')
        rgs = ranges("i == 3")
        compare(inc(rgs,0,'i'),'text')
    })
    section("ligature", function ()
    {
        rgs = ranges(" @: ->")
        compare(inc(rgs,1,"@"),'method')
        compare(inc(rgs,2,":"),'punct method')
        compare(inc(rgs,4,"->"),'punct function tail ligature')
        rgs = ranges(" @:->a")
        compare(inc(rgs,1,"@"),'method')
        compare(inc(rgs,2,":"),'punct method')
        compare(inc(rgs,3,"->"),'punct function tail ligature')
    })
    section("keyword", function ()
    {
        rgs = ranges("empty noon valid ")
        compare(inc(rgs,0,"empty"),'keyword')
        compare(inc(rgs,6,"noon"),'keyword')
        compare(inc(rgs,11,"valid"),'keyword')
        rgs = ranges("min max clamp first last")
        compare(inc(rgs,0,"min"),'keyword')
        compare(inc(rgs,4,"max"),'keyword')
        compare(inc(rgs,14,"first"),'keyword')
        compare(inc(rgs,20,"last"),'keyword')
    })
    section("tests", function ()
    {
        rgs = ranges("▸ some text")
        compare(inc(rgs,0,"▸"),'punct keyword')
        compare(inc(rgs,2,"some"),'section')
        compare(inc(rgs,7,"text"),'section')
        rgs = ranges("    ▸ some text")
        compare(inc(rgs,4,"▸"),'punct keyword')
        compare(inc(rgs,6,"some"),'section')
        compare(inc(rgs,11,"text"),'section')
        rgs = ranges("    some ▸ test")
        compare(inc(rgs,9,"▸"),'punct keyword')
        compare(inc(rgs,11,"test"),'text')
    })
    section("then", function ()
    {
        rgs = ranges("➜")
        compare(inc(rgs,0,"➜"),'punct keyword')
    })
    section("is", function ()
    {
        rgs = ranges("a is str")
        compare(inc(rgs,2,"is"),'keyword')
        compare(inc(rgs,5,"str"),'keyword')
        rgs = ranges("a is num")
        compare(inc(rgs,5,"num"),'keyword')
        rgs = ranges("a is obj")
        compare(inc(rgs,5,"obj"),'keyword')
        rgs = ranges("a is arr")
        compare(inc(rgs,5,"arr"),'keyword')
        rgs = ranges("a is func")
        compare(inc(rgs,5,"func"),'keyword')
        rgs = ranges("a is elem")
        compare(inc(rgs,5,"elem"),'keyword')
    })
    section("dir", function ()
    {
        rgs = ranges("◆dir")
        compare(inc(rgs,0,"◆"),'punct keyword')
        compare(inc(rgs,1,"dir"),'keyword')
        rgs = ranges("◆Dir")
        compare(inc(rgs,0,"◆"),'punct')
        compare(inc(rgs,1,"Dir"),'text')
    })
    section("file", function ()
    {
        rgs = ranges("◆file")
        compare(inc(rgs,0,"◆"),'punct keyword')
        compare(inc(rgs,1,"file"),'keyword')
        rgs = ranges("◆files")
        compare(inc(rgs,0,"◆"),'punct')
        compare(inc(rgs,1,"files"),'text')
    })
    section("use", function ()
    {
        rgs = ranges("use fs")
        compare(inc(rgs,0,"use"),'keyword require')
        compare(inc(rgs,4,"fs"),'require')
        rgs = ranges("use ../mod")
        compare(inc(rgs,0,"use"),'keyword require')
        compare(inc(rgs,4,"."),'punct require')
        compare(inc(rgs,5,"."),'punct require')
        compare(inc(rgs,6,"/"),'punct require')
        compare(inc(rgs,7,"mod"),'text require string')
        rgs = ranges("use ./dir/mod")
        compare(inc(rgs,0,"use"),'keyword require')
        compare(inc(rgs,4,"."),'punct require')
        compare(inc(rgs,5,"/"),'punct require')
        compare(inc(rgs,6,"dir"),'text require')
        compare(inc(rgs,9,"/"),'punct require')
        compare(inc(rgs,10,"mod"),'text require string')
        rgs = ranges("use: (n) ->")
        compare(inc(rgs,0,"use"),'method')
        compare(inc(rgs,3,":"),'punct method')
        rgs = ranges("use ◆ A bC d")
        compare(inc(rgs,0,"use"),'keyword require')
        compare(inc(rgs,4,"◆"),'punct require')
        compare(inc(rgs,6,"A"),'text require string')
        compare(inc(rgs,8,"bC"),'text require string')
        compare(inc(rgs,11,"d"),'text require string')
    })
    section("no comma", function ()
    {
        rgs = ranges("[1 'x' a:1 c:d]")
        compare(inc(rgs,1,"1"),'number')
        compare(inc(rgs,4,"x"),'string single')
        compare(inc(rgs,7,"a"),'dictionary key')
        compare(inc(rgs,11,"c"),'dictionary key')
    })
    section("method", function ()
    {
        rgs = ranges(" a: =>")
        compare(inc(rgs,1,"a"),'method')
        compare(inc(rgs,2,":"),'punct method')
        compare(inc(rgs,4,"=>"),'punct function bound tail ligature')
        rgs = ranges(" a: ->")
        compare(inc(rgs,1,"a"),'method')
        compare(inc(rgs,2,":"),'punct method')
        compare(inc(rgs,4,"->"),'punct function tail ligature')
        rgs = ranges("mthd:  (arg)    => @member memarg")
        compare(inc(rgs,0,'mthd'),'method')
        compare(inc(rgs,4,':'),'punct method')
        compare(inc(rgs,16,'=>'),'punct function bound tail ligature')
        rgs = ranges("@mthd: (arg) ->")
        compare(inc(rgs,0,'@'),'punct method class')
        compare(inc(rgs,1,'mthd'),'method class')
    })
    section("return", function ()
    {
        rgs = ranges("⮐ 1")
        compare(inc(rgs,0,"⮐"),'punct keyword return')
    })
}
toExport["kode"]._section_ = true
toExport._test_ = true
export default toExport
