var toExport = {}
import utils from "./utils.js"
let kc = utils.kc
let ke = utils.ke

toExport["operator"] = function ()
{
    section("clamp", function ()
    {
        compare(ke("clamp 1 10 12"),10)
        compare(ke("clamp 1 10 -1"),1)
        compare(ke("clamp 1 10"),1)
        compare(ke("clamp 1 10 null"),1)
        compare(ke("clamp 1 10 {}"),1)
        compare(ke("clamp 1 10 Infinity"),10)
        compare(ke("clamp 1 10 -Infinity"),1)
        compare(ke("clamp 1 10 NaN"),1)
        compare(ke("clamp -1 10 12"),10)
        compare(ke("clamp -1 10 -2"),-1)
        compare(ke("clamp -1 10"),-1)
        compare(ke("clamp -1 10 null"),-1)
        compare(ke("clamp -1 10 {}"),-1)
        compare(ke("clamp -1 10 Infinity"),10)
        compare(ke("clamp -1 10 -Infinity"),-1)
        compare(ke("clamp -1 10 NaN"),-1)
        compare(ke("clamp 10.1 2.2 12"),10.1)
        compare(ke("clamp 10.1 2.2 -2"),2.2)
        compare(ke("clamp 10.1 2.2"),2.2)
        compare(ke("clamp 10.1 2.2 null"),2.2)
        compare(ke("clamp 10.1 2.2 {}"),2.2)
        compare(ke("clamp 10.1 2.2 Infinity"),10.1)
        compare(ke("clamp 10.1 2.2 -Infinity"),2.2)
        compare(ke("clamp 10.1 2.2 NaN"),2.2)
        compare(ke("clamp 5 5 12"),5)
        compare(ke("clamp 5 5 -2"),5)
        compare(ke("clamp 5 5"),5)
        compare(ke("clamp 5 5 null"),5)
        compare(ke("clamp 5 5 {}"),5)
        compare(ke("clamp 5 5 Infinity"),5)
        compare(ke("clamp 5 5 -Infinity"),5)
        compare(ke("clamp 5 5 NaN"),5)
        compare(ke("clamp '1' '2' '3'"),2)
        compare(ke("clamp '1.12' '2.23' '3.34'"),2.23)
        compare(ke("clamp null NaN 5"),5)
        compare(ke("clamp null 4 -3"),0)
        compare(ke("clamp null 4 2"),2)
        compare(ke("clamp null 4 5"),4)
        compare(ke("clamp NaN 4 -3"),-3)
        compare(ke("clamp NaN 4 5"),5)
        compare(ke("clamp NaN 4 7"),7)
        compare(ke("clamp 4 NaN 5"),5)
        compare(ke("clamp 4 NaN 3"),3)
        compare(ke("clamp 4 NaN -2"),-2)
        compare(ke("clamp 4 null -3"),0)
        compare(ke("clamp 4 null 2"),2)
        compare(ke("clamp 4 null 5"),4)
        compare(ke("clamp null null null"),0)
        compare(ke("clamp null null"),0)
        compare(ke("clamp null"),NaN)
        compare(ke("clamp()"),NaN)
        compare(ke("clamp NaN NaN NaN"),NaN)
    })
    section("int", function ()
    {
        compare(ke("int 1.234"),1)
        compare(ke("int '2.34'"),2)
    })
    section("float", function ()
    {
        compare(ke("float 1.234"),1.234)
        compare(ke("float '2.34'"),2.34)
    })
    section("first", function ()
    {
        compare(ke("first []"),undefined)
        compare(ke("first [1]"),1)
        compare(ke("first [1 2]"),1)
        compare(ke("first [null 2]"),null)
        compare(ke("first [[3,4] 2]"),[3,4])
        compare(ke("first 'abc'"),'a')
        compare(ke("first 1"),undefined)
        compare(ke("first {}"),undefined)
        compare(ke("first null"),null)
        compare(ke("first([1 2]) == 1"),true)
        compare(ke("first [1 2]  == 1"),true)
        compare(ke("a = [1 2]; first a == 1"),true)
    })
    section("last", function ()
    {
        compare(ke("last []"),undefined)
        compare(ke("last [1]"),1)
        compare(ke("last [1 2]"),2)
        compare(ke("last [null 2]"),2)
        compare(ke("last [[3,4] 2]"),2)
        compare(ke("last 'abc'"),'c')
        compare(ke("last 1"),undefined)
        compare(ke("last {}"),undefined)
        compare(ke("last null"),null)
        compare(ke("last([1 2]) == 2"),true)
        compare(ke("last [1 2]  == 2"),true)
        compare(ke("a = [1 2]; last a == 2"),true)
        compare(kc("last(ctx.stack)"),"_k_.last(ctx.stack)")
        compare(kc("last(ctx.stack)[1..]"),"_k_.last(ctx.stack).slice(1)")
        compare(kc("last [[3,4] 2]"),"_k_.last([[3,4],2])")
        compare(kc("lr = lr[last(ctx.stack)[1..]]"),"lr = lr[_k_.last(ctx.stack).slice(1)]")
        compare(kc("if f.match == '{' and last(block.fillet).match == '}'"),"if (f.match === '{' && _k_.last(block.fillet).match === '}')\n{\n}")
        compare(ke("last = 2; '01x3'[last]"),"x")
        compare(ke("end=4\nlast = 2\na = []\nfor i in [last...end] âžœ a.push i\na"),[2,3])
        compare(kc("last(@tokenStack).name"),"_k_.last(this.tokenStack).name")
    })
    section("min", function ()
    {
        compare(ke("min()"),Infinity)
        compare(ke("min null"),Infinity)
        compare(ke("min []"),Infinity)
        compare(ke("min {}"),Infinity)
        compare(ke("min null 3"),3)
        compare(ke("min [] 3"),3)
        compare(ke("min {} 3"),3)
        compare(ke("min 2 1"),1)
        compare(ke("min 3 2 1"),1)
        compare(ke("min [3 2 1]"),1)
        compare(ke("min [5 6] 4 [3 2]"),2)
        compare(ke("min [8 [9 [10 [7 6]]]]"),6)
        compare(ke("min '2.2' '1.1'"),1.1)
        compare(ke("min NaN, 2 1"),1)
        compare(ke("min NaN, 3 2 1"),1)
        compare(ke("min NaN, [3 2 1]"),1)
        compare(ke("min NaN, [5 6], 4 [3 2]"),2)
        compare(ke("min NaN, [8 [9 [10 [7 6]]]]"),6)
    })
    section("max", function ()
    {
        compare(ke("max()"),-Infinity)
        compare(ke("max null"),-Infinity)
        compare(ke("max []"),-Infinity)
        compare(ke("max {}"),-Infinity)
        compare(ke("max null 3"),3)
        compare(ke("max [] 3"),3)
        compare(ke("max {} 3"),3)
        compare(ke("max 2 1"),2)
        compare(ke("max 1 2 3"),3)
        compare(ke("max [1 2 3]"),3)
        compare(ke("max [5 6], 4 [3 2]"),6)
        compare(ke("max [8 [9 [10 [7 6]]]]"),10)
        compare(ke("max '2.2' '1.1'"),2.2)
        compare(ke("max NaN, 2 1"),2)
        compare(ke("max NaN, 3 2 1"),3)
        compare(ke("max NaN, [3 2 1]"),3)
        compare(ke("max NaN, [5 6], 4 [3 2]"),6)
        compare(ke("max NaN, [8 [9 [10 [7 16]]]]"),16)
    })
    section("clone", function ()
    {
        compare(ke(`a = b:1 c: d: 3
c = clone a`),{b:1,c:{d:3}})
        compare(ke(`a = b:1 c: d: 3
c = clone a
noon c`),`b   1
c
    d   3`)
        compare(ke("clone 0"),0)
        compare(ke("clone 1"),1)
        compare(ke("clone 'a'"),'a')
        compare(ke("clone null"),null)
        compare(ke("clone undefined"),undefined)
        compare(ke("clone Infinity"),Infinity)
        compare(ke("clone []"),[])
        compare(ke("clone [1]"),[1])
        compare(ke("clone [null]"),[null])
        compare(ke("clone a:null"),{a:null})
        compare(kc("f e+1, copy d"),'f(e + 1,_k_.copy(d))')
    })
    section("eql", function ()
    {
        compare(ke(`a = [1 2 3]
b = [1 2]
b.push 3
a eql b`),true)
        compare(ke(`a = [1 2 3]
b = [1 2].concat [3]
p = hello:a, world:b
q = hello:b, world:a
p eql q`),true)
    })
    section("empty", function ()
    {
        compare(kc(`if empty [] == false
    1234`),`if (_k_.empty([]) === false)
{
    1234
}`)
        compare(ke("a = []; empty a"),true)
        compare(ke("a = {}; empty a"),true)
        compare(ke("a = ''; empty a"),true)
        compare(ke("a = null; empty a"),true)
        compare(ke("a = undefined; empty a"),true)
        compare(ke("a = NaN; empty a"),true)
        compare(ke('empty 1 or empty {}'),true)
        compare(ke('empty {} or empty 1'),true)
        compare(ke("a = Infinity; empty a"),false)
        compare(ke("a = 0; empty a"),false)
        compare(ke("a = 'a'; empty a"),false)
        compare(ke("a = Infinity; empty a"),false)
        compare(ke("a = [null]; empty a"),false)
        compare(ke("a = {a:null}; empty a"),false)
        compare(ke("a = [[]]; empty a"),false)
        compare(ke('empty "x" or valid {}'),false)
        compare(ke('empty {} and valid []'),false)
    })
    section("valid", function ()
    {
        compare(ke("valid []"),false)
        compare(ke("valid {}"),false)
        compare(ke("valid ''"),false)
        compare(ke("valid null"),false)
        compare(ke("valid undefined"),false)
        compare(ke("valid NaN"),false)
        compare(ke('valid {} and valid 0'),false)
        compare(ke("valid Infinity"),true)
        compare(ke("valid 0"),true)
        compare(ke("valid 'a'"),true)
        compare(ke("valid [null]"),true)
        compare(ke("valid {a:null}"),true)
        compare(ke("valid [[]]"),true)
        compare(ke('valid {} or valid 1'),true)
        compare(ke("valid 'a' or valid ''"),true)
        compare(ke("valid 'a' and empty ''"),true)
    })
    section("lpad", function ()
    {
        compare(ke("lpad 10"),"          ")
        compare(ke("lpad 10 'l'"),"         l")
        compare(ke("lpad 10 'l' '*'"),"*********l")
        compare(ke("lpad 10 ''  '*'"),"**********")
        compare(ke("lpad 10 'l' '+-'"),"+-+-+-+-+-l")
        compare(ke("lpad 5  '1234567890'"),"1234567890")
    })
    section("rpad", function ()
    {
        compare(ke("rpad 10"),"          ")
        compare(ke("rpad 10 'r'"),"r         ")
        compare(ke("rpad 10 'r' '*'"),"r*********")
        compare(ke("rpad 10 ''  '*'"),"**********")
        compare(ke("rpad 10 'r' '%#'"),"r%#%#%#%#%#")
        compare(ke("rpad 5  '1234567890'"),"1234567890")
    })
    section("trim", function ()
    {
        compare(ke("trim  '   x   '"),'x')
        compare(ke("ltrim '   x   '"),'x   ')
        compare(ke("rtrim '   x   '"),'   x')
        compare(ke("trim  'babab   x   bababa' 'ab'"),'   x   ')
        compare(ke("ltrim 'babab   x   bababa' 'ab'"),'   x   bababa')
        compare(ke("rtrim 'babab   x   bababa' 'ab'"),'babab   x   ')
    })
    section("noon", function ()
    {
        compare(kc('opt = noon.parse "1"'),'opt = noon.parse("1")')
    })
    section("typeof", function ()
    {
        compare(kc(`if typeof pat == 'string'
    1`),`if (typeof(pat) === 'string')
{
    1
}`)
    })
    section("instanceof", function ()
    {
        compare(kc('a instanceof b'),'a instanceof b')
        compare(kc('a instanceof b == true'),'a instanceof b === true')
    })
}
toExport["operator"]._section_ = true
toExport._test_ = true
export default toExport
