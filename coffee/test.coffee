###
000000000  00000000   0000000  000000000  
   000     000       000          000     
   000     0000000   0000000      000     
   000     000            000     000     
   000     00000000  0000000      000     
###

{ expect } = require 'chai'

calc = require './calc'

describe 'calc', ->

    it 'calc', ->
        
        list = [
            ['2^2^2',   '16']
            ['2^(3^4)', '2.4178516392292583e+24']
            ['2^3^4',   '2.4178516392292583e+24']
            ['(2^3)^4', '4096']
            ['9*-3',    '-27']
            ['180°',    '3.141592653589793']
            ['√(9)',    '3']
            ['√(8+1',   '3']
            ['log(ℇ',   '1']
            ['cos(π',   '-1']
            ['sin(π/2', '1']
            ['1/0',     '∞']
            ['1/(∞',    '0']
            ['0/0',     '']
        ]
        for l in list 
            expect(calc.calc l[0]).to.eql l[1]
        
    it 'equals', ->
        
        list = [
            ['2^2',   '=', '4']
            ['2^4',   '=', '16']
            ['2^2^2', '=', '16']
        ]
        for l in list 
            expect(calc.textKey l[0], l[1]).to.eql l[2]
    
    it 'replace', ->
        list = [
            ['2^0',   '1']
            ['2^0',   '2']
            ['∞',     '3']
        ]
        for l in list 
            expect(calc.textKey l[0], l[1]).to.eql l[0].substr(0,l[0].length-1)+l[1]
                
    it 'block', ->
        
        list = [
            [['0', '0°', 'ℇ', 'π'],         '0']
            [['1°', 'ℇ', 'π'],              '1']
            [['2°', 'ℇ', 'π'],              'π']
            [['3°', 'ℇ', 'π'],              'ℇ']            
            [['', '4^'],                    '^']
            [['', '5.', '5°', '5.5'],       '.']
            [['', '6.', '6/'],              '/']
            [['', '7.', '7*'],              '*']
            [['8°', '8.', 'ℇ', 'π'],        '°']
            [['9.'],                        '√']            
            [['', '(', '2+2', '((2+2)*3)'], ')']
        ]
        for l in list
            for t in l[0]
                expect(calc.textKey t, l[1]).to.eql t
            
            